#define NOMINMAX

#include <string>
#include <vector>

#include <tbb/tbb.h>

#include "Camera.h"
#include "IntersectableSphere.h"
#include "Scene.h"
#include "Image.h"
#include "RayTracer.h"
#include "ShaderLambert.h"
#include "LightDirectional.h"
#include "ImageWriterBMP.h"
#include "ImageWriterTGA.h"
#include "PostProcessToneMap.h"

#include <chrono>
typedef std::chrono::high_resolution_clock Clock;


int main()
{
	auto t1 = Clock::now();

	int numThreads = tbb::task_scheduler_init::default_num_threads();

	std::cout << "Rendering using " << numThreads << " cores" << std::endl;

	tbb::task_scheduler_init init(numThreads);

	tbb::task_group group;

	Camera camera(Vector3(0.0f, 0.0f, -9.0f));

	ShaderPtr yellowShader(new ShaderLambert(RGB(0.9f, 0.9f, 0.1f), 0.25f));
	ShaderPtr greenShader(new ShaderLambert(RGB(0.1f, 0.9f, 0.1f), 0.25f));
	ShaderPtr blueShader(new ShaderLambert(RGB(0.1f, 0.1f, 0.9f), 0.25f));
	ShaderPtr mirrorShader(new ShaderLambert(RGB(0.0f, 0.0f, 0.0f), 0.0f));

	ScenePtr scene(new Scene);

	scene->addLight<LightDirectional>(Vector3(-0.5f, -0.5f, 1.0f).normalize(), RGBA(1.0f, 1.0f, 1.0f, 2.0f), 0.5f, 0.05f);

	scene->addIntersectable<IntersectableSphere>(Vector3(-2.0f, -1.0f, -3.0f), 1.0f)->setShader(yellowShader);
	scene->addIntersectable<IntersectableSphere>(Vector3(0.0f, 0.5f, 1.0f), 3.0f)->setShader(greenShader);
	scene->addIntersectable<IntersectableSphere>(Vector3(2.5f, 1.0f, -5.0f), 1.0f)->setShader(blueShader);

	Image image(800, 600);

	camera.setAspectRatio(image.aspectRatio());

	RayTracer rayTracer(scene, 32);

	rayTracer.traceImage(camera, image);

	PostProcessStack postProcessStack;
	//PostProcessToneMapPtr toneMap = postProcessStack.push<PostProcessToneMap>();

	postProcessStack.process(image);

	//std::string renderpath = "C:\\Users\\sc\\Documents\\GitHub\\XRay\\render";
	std::string renderpath = "E:\\GitHub\\XRay\\render";

	ImageWriterBMP writerBMP;
	writerBMP.writeImage(image, renderpath + ".bmp");

	ImageWriterTGA writerTGA;
	writerTGA.writeImage(image, renderpath + ".tga");

	std::cout << "Wrote render to " << renderpath << ".bmp" << std::endl;
	std::cout << "Wrote render to " << renderpath << ".tga" << std::endl;

	auto t2 = Clock::now();
	std::cout << "Render time: "
		<< double(std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()) / 1000.0
		<< " seconds" << std::endl;

	return 0;
}